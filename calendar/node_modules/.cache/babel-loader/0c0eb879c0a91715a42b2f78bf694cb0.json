{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\modri\\\\OneDrive\\\\Documenti\\\\GitHub\\\\BlockCOVID-server\\\\calendar\\\\src\\\\Scheduler.tsx\";\nimport React from 'react';\nimport { DayPilot, DayPilotScheduler } from \"daypilot-pro-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Scheduler extends React.Component {\n  constructor(props) {\n    super(props); //questo serve per avere la visualizzazione intera dell'anno senza di questo \n    //invece ottengo solamente il giorno attuale con le ore\n\n    this.scheduler = void 0;\n    this.state = {\n      startDate: \"2021-01-01\",\n      days: 365,\n      scale: \"Day\",\n      eventHeight: 50,\n      timeHeaders: [{\n        groupBy: \"Month\"\n      }, {\n        groupBy: \"Day\",\n        format: \"d\"\n      }],\n      cellWidth: 50,\n      //giorno attuale con le ore\n      resources: [{\n        name: \"8:00\",\n        id: \"A\"\n      }, {\n        name: \"9:00\",\n        id: \"B\"\n      }, {\n        name: \"10:00\",\n        id: \"C\"\n      }, {\n        name: \"11:00\",\n        id: \"D\"\n      }, {\n        name: \"12:00\",\n        id: \"E\"\n      }, {\n        name: \"13:00\",\n        id: \"F\"\n      }, {\n        name: \"14:00\",\n        id: \"G\"\n      }, {\n        name: \"15:00\",\n        id: \"H\"\n      }, {\n        name: \"16:00\",\n        id: \"I\"\n      }, {\n        name: \"17:00\",\n        id: \"J\"\n      }, {\n        name: \"18:00\",\n        id: \"K\"\n      }, {\n        name: \"19:00\",\n        id: \"L\"\n      }, {\n        name: \"20:00\",\n        id: \"M\"\n      }],\n      events: [{\n        id: 1,\n        text: \"Reservation 1\",\n        start: \"2021-11-03T00:00:00\",\n        end: \"2021-11-09T00:00:00\",\n        resource: \"A\",\n        barColor: \"#3d85c6\"\n      }, {\n        id: 2,\n        text: \"Reservation 2\",\n        start: \"2021-11-04T00:00:00\",\n        end: \"2021-11-08T00:00:00\",\n        resource: \"C\",\n        barColor: \"#38761d\"\n      }, {\n        id: 3,\n        text: \"Reservation 3\",\n        start: \"2021-11-02T00:00:00\",\n        end: \"2021-11-05T00:00:00\",\n        resource: \"D\",\n        barColor: \"#f1c232\"\n      }, {\n        id: 4,\n        text: \"Reservation 4\",\n        start: \"2021-11-03T00:00:00\",\n        end: \"2021-11-06T00:00:00\",\n        resource: \"E\",\n        barColor: \"#cc0000\"\n      }, {\n        id: 5,\n        text: \"Reservation 5\",\n        start: \"2021-11-12T00:00:00\",\n        end: \"2021-11-12T00:00:00\",\n        resource: \"A\",\n        barColor: \"#cc0000\"\n      }, {\n        id: 6,\n        text: \"Reservation 6\",\n        start: \"2021-11-12T00:00:00\",\n        end: \"2021-11-12T00:00:00\",\n        resource: \"E\",\n        barColor: \"#cc0000\"\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.scheduler && this.scheduler.scrollTo(\"2021-11-01\");\n  }\n\n  render() {\n    var { ...config\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DayPilotScheduler, { ...config,\n        onEventMoved: args => {\n          this.scheduler && this.scheduler.message(\"Event moved: \" + args.e.data.text);\n        },\n        onEventResized: args => {\n          this.scheduler && this.scheduler.message(\"Event resized: \" + args.e.data.text);\n        },\n        onTimeRangeSelected: args => {\n          DayPilot.Modal.prompt(\"New reservation:\", \"Reservation\").then(modal => {\n            this.scheduler && this.scheduler.clearSelection();\n\n            if (!modal.result) {\n              return;\n            }\n\n            this.scheduler && this.scheduler.events.add({\n              id: DayPilot.guid(),\n              text: modal.result,\n              start: args.start,\n              end: args.end,\n              resource: args.resource\n            });\n          });\n        },\n        onEventClicked: args => {\n          let e = args.e;\n          DayPilot.Modal.prompt(\"Edit reservation:\", e.data.text).then(modal => {\n            this.scheduler && this.scheduler.clearSelection();\n\n            if (modal.canceled) {\n              return;\n            }\n\n            e.data.text = modal.result;\n            this.scheduler && this.scheduler.events.update(e);\n          });\n        },\n        ref: component => {\n          if (!component) {\n            return;\n          }\n\n          this.scheduler = component.control;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/modri/OneDrive/Documenti/GitHub/BlockCOVID-server/calendar/src/Scheduler.tsx"],"names":["React","DayPilot","DayPilotScheduler","Scheduler","Component","constructor","props","scheduler","state","startDate","days","scale","eventHeight","timeHeaders","groupBy","format","cellWidth","resources","name","id","events","text","start","end","resource","barColor","componentDidMount","scrollTo","render","config","args","message","e","data","Modal","prompt","then","modal","clearSelection","result","add","guid","canceled","update","component","control"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {DayPilot, DayPilotScheduler} from \"daypilot-pro-react\";\r\n\r\ninterface SchedulerProps {\r\n\r\n}\r\n\r\nexport default class Scheduler extends React.Component<SchedulerProps, any> {\r\n\r\n    scheduler?: DayPilot.Scheduler;\r\n\r\n    constructor(props: SchedulerProps) {\r\n        super(props);\r\n        //questo serve per avere la visualizzazione intera dell'anno senza di questo \r\n        //invece ottengo solamente il giorno attuale con le ore\r\n        this.state = {\r\n            startDate: \"2021-01-01\",\r\n            days: 365,\r\n            scale: \"Day\",\r\n            eventHeight: 50,\r\n            timeHeaders: [\r\n                {groupBy: \"Month\"},\r\n                {groupBy: \"Day\", format: \"d\"}\r\n            ],\r\n            cellWidth: 50,\r\n            \r\n            //giorno attuale con le ore\r\n            resources: [\r\n                {name: \"8:00\", id: \"A\"},\r\n                {name: \"9:00\", id: \"B\"},\r\n                {name: \"10:00\", id: \"C\"},\r\n                {name: \"11:00\", id: \"D\"},\r\n                {name: \"12:00\", id: \"E\"},\r\n                {name: \"13:00\", id: \"F\"},\r\n                {name: \"14:00\", id: \"G\"},\r\n                {name: \"15:00\", id: \"H\"},\r\n                {name: \"16:00\", id: \"I\"},\r\n                {name: \"17:00\", id: \"J\"},\r\n                {name: \"18:00\", id: \"K\"},\r\n                {name: \"19:00\", id: \"L\"},\r\n                {name: \"20:00\", id: \"M\"},\r\n            ],\r\n            events: [\r\n                {\r\n                    id: 1,\r\n                    text: \"Reservation 1\",\r\n                    start: \"2021-11-03T00:00:00\",\r\n                    end: \"2021-11-09T00:00:00\",\r\n                    resource: \"A\",\r\n                    barColor: \"#3d85c6\"\r\n                },\r\n                {\r\n                    id: 2,\r\n                    text: \"Reservation 2\",\r\n                    start: \"2021-11-04T00:00:00\",\r\n                    end: \"2021-11-08T00:00:00\",\r\n                    resource: \"C\",\r\n                    barColor: \"#38761d\"\r\n                },\r\n                {\r\n                    id: 3,\r\n                    text: \"Reservation 3\",\r\n                    start: \"2021-11-02T00:00:00\",\r\n                    end: \"2021-11-05T00:00:00\",\r\n                    resource: \"D\",\r\n                    barColor: \"#f1c232\"\r\n                },\r\n                {\r\n                    id: 4,\r\n                    text: \"Reservation 4\",\r\n                    start: \"2021-11-03T00:00:00\",\r\n                    end: \"2021-11-06T00:00:00\",\r\n                    resource: \"E\",\r\n                    barColor: \"#cc0000\"\r\n                },\r\n                {\r\n                    id: 5,\r\n                    text: \"Reservation 5\",\r\n                    start: \"2021-11-12T00:00:00\",\r\n                    end: \"2021-11-12T00:00:00\",\r\n                    resource: \"A\",\r\n                    barColor: \"#cc0000\"\r\n                },\r\n                {\r\n                    id: 6,\r\n                    text: \"Reservation 6\",\r\n                    start: \"2021-11-12T00:00:00\",\r\n                    end: \"2021-11-12T00:00:00\",\r\n                    resource: \"E\",\r\n                    barColor: \"#cc0000\"\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.scheduler && this.scheduler.scrollTo(\"2021-11-01\");\r\n    }\r\n\r\n    render() {\r\n        var {...config} = this.state;\r\n        return (\r\n            <div>\r\n\r\n                <DayPilotScheduler\r\n                    {...config}\r\n                    onEventMoved={args => {\r\n                        this.scheduler && this.scheduler.message(\"Event moved: \" + args.e.data.text);\r\n                    }}\r\n                    onEventResized={args => {\r\n                        this.scheduler && this.scheduler.message(\"Event resized: \" + args.e.data.text);\r\n                    }}\r\n                    onTimeRangeSelected={args => {\r\n                        DayPilot.Modal.prompt(\"New reservation:\", \"Reservation\").then(modal => {\r\n                            this.scheduler && this.scheduler.clearSelection();\r\n                            if (!modal.result) {\r\n                                return;\r\n                            }\r\n                            this.scheduler && this.scheduler.events.add({\r\n                                id: DayPilot.guid(),\r\n                                text: modal.result,\r\n                                start: args.start,\r\n                                end: args.end,\r\n                                resource: args.resource\r\n                            });\r\n                        });\r\n                    }}\r\n                    onEventClicked={args => {\r\n                        let e = args.e;\r\n                        DayPilot.Modal.prompt(\"Edit reservation:\", e.data.text).then(modal => {\r\n                            this.scheduler && this.scheduler.clearSelection();\r\n                            if (modal.canceled) {\r\n                                return;\r\n                            }\r\n                            e.data.text = modal.result;\r\n                            this.scheduler && this.scheduler.events.update(e);\r\n                        });\r\n                    }}\r\n                    ref={component => {\r\n                        if (!component) {\r\n                            return;\r\n                        }\r\n                        this.scheduler = component.control;\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}